/*
    Calculates the energy landscape between two ellipse-plus-shaped islands, for all possible values of
    their magnetization angles.
*/
//// Grid
Nx := 256
Ny := 256
Nz := 1
cellSize := 2.00e-9
SetGridSize(Nx, Ny, Nz)
SetCellSize(cellSize, cellSize, 5e-9/Nz)
Lx := cellSize*Nx
Ly := cellSize*Ny
print("Simulation area:", Lx, "by", Ly)

//// Material parameters
Aex = 13e-12
print("Exchange length:", Sqrt((2*Aex.GetRegion(0))/(mu0*Pow(Msat.GetRegion(0), 2)))) // 5.6858e-9 so ok to use Nz = 1 for 5e-9 thickness

//// Island angles
// GEOM: For free islands: rotation of geometry (0.0 <= angle{n} < Pi/2), for fixed islands their direction (any value)
angle1 := 0.0000000000
angle2 := 0.7853981634
angle3 := 0.7853981634
angle4 := 3.9269908170

// GEOM: Here 'a{n} := angle{n}' for all islands {n} which are NOT fixed
a1 := angle1
a2 := angle2
a3 := angle3
a4 := angle4

//// Island geometries
// GEOM: Here island{n} := Ellipse().Add(Ellipse().RotZ()).RotZ(angle{n}).Transl(x,y,0)
island1 := Ellipse(100.00e-9, 66.00e-9)
island2 := Ellipse(100.00e-9, 66.00e-9)
island3 := Ellipse(100.00e-9, 66.00e-9)
island4 := Ellipse(100.00e-9, 66.00e-9)
island1 = island1.Add(island1.RotZ(Pi/2))
island2 = island2.Add(island2.RotZ(Pi/2))
island3 = island3.Add(island3.RotZ(Pi/2))
island4 = island4.Add(island4.RotZ(Pi/2))
island1 = island1.RotZ(angle1).Transl(-150.000e-9, -16.000e-9, 0)
island2 = island2.RotZ(angle2).Transl(-60.000e-9, -106.000e-9, 0)
island3 = island3.RotZ(angle3).Transl(30.000e-9, -16.000e-9, 0)
island4 = island4.RotZ(angle4).Transl(150.000e-9, 104.000e-9, 0)
// GEOM: Here add all islands together
geometry := island1.Add(island2).Add(island3).Add(island4)
SetGeom(geometry)

// GEOM: Here define region for all islands
DefRegion(1, island1)
DefRegion(2, island2)
DefRegion(3, island3)
DefRegion(4, island4)
Msat.SetRegion(1, 8.00e+05)
Msat.SetRegion(2, 8.00e+05)
Msat.SetRegion(3, 8.00e+05)
Msat.SetRegion(4, 8.00e+05)
Save(regions)

fixationField := 1
// GEOM: Here set external field for all FIXED islands with B_ext.setRegion({n}, Vector(cos(angle{n}), sin(angle{n}), 0).Mul(fixationField))
B_ext.setRegion(4, Vector(cos(angle4), sin(angle4), 0).Mul(fixationField))
m.setRegion(4, Uniform(cos(angle4), sin(angle4), 0))
Save(B_ext)

//// Track E_total, angle, shape
// Use Quantity.Region(int) to get the quantity in one region
TableAdd(E_total) // Total energy
TableAdd(E_Zeeman) // Zeeman only takes into account B_ext, and thus the fixation of the fixed islands (to be subtracted from E_total)
// GEOM: Here print out a{n} for all islands which are NOT fixed (a{n} only exists for those)
TableAddVar(a1, "a1", "rad")
TableAddVar(a2, "a2", "rad")
TableAddVar(a3, "a3", "rad")
TableAddVar(a4, "a4", "rad")
// GEOM: Here print out magnetization for all islands, including fixed ones
TableAdd(m.Region(1))
TableAdd(m.Region(2))
TableAdd(m.Region(3))
TableAdd(m.Region(4))

TableAddVar(0.660, "roundness", "")
TableAddVar(100.000, "size", "m")

TableAddVar(cellSize, "Cell_size", "m")


//// Many nested loops
// GEOM: A loop for each island that is NOT fixed
for a1=angle1; a1 < 2*Pi+angle1; a1 += Pi/2 {
for a2=angle2; a2 < 2*Pi+angle2; a2 += Pi/2 {
for a3=angle3; a3 < 2*Pi+angle3; a3 += Pi/2 {
    m.setRegion(1, Uniform(1,0,0).rotZ(a1))
    m.setRegion(2, Uniform(1,0,0).rotZ(a2))
    m.setRegion(3, Uniform(1,0,0).rotZ(a3))
    
    minimize()
    TableSave()
}
}
}
